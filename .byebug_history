quit
questions_list
quit
quot
questions_list
quit
questions_list
quit
@questions
quit
@questions
quit
add
next
questions_list
next
questions_list
next
add
next
questions_list
question_list
add
quit
questions_list
continue
next
quit
@questions[@current_strand].first.split(",")[-2].strip
@questions[@current_strand].first.split(",")[-2].split
@questions[@current_strand].first.split(",")[-2]
@questions[@current_strand].first.split(",")[-1]
@questions[@current_strand].first.split(",")
@questions[@current_strand].first
@questions[@current_strand]
@questions
quit
@questions["strand2"]
@questions
quit
@questions[@current_strand].first.split(",")[-2].to_s.strip
continue
@questions[@current_strand].first.split(",")[-2].to_s.strip
" asfa ".chomp.to_s
" asfa ".chomp
chomp
"1 ".chomp
@questions[@current_strand].first.split(",")[-2].to_s.chomp
@questions[@current_strand].first.split(",")[-2]
@questions[@current_strand].first.split(",")
@questions[@current_strand].first.first
@questions[@current_strand].first
@questions[@current_strand]
@questions
questions_list
quit
questions_list
continue
next
@current_strand
quit
@questions[:strand1]
@questions["strand1"]
@questions
@current_strand
quit
questions_parsed
quit
questions_parsed
quit
next
questions_parsed
next
questions_parsed
quit
questions_parsed
quit
questions_parsed[("strand" + strand.to_s).to_sym][standard] << id
questions_parsed[("strand" + strand.to_s).to_sym][standard]
standard.to_i.to_sym
standard.to_i
standard.to_sym
standard
questions_parsed[("strand" + strand.to_s).to_sym]
("strand" + strand.to_s).to_sym
"strand" + strand.to_s
strand
id
quit
questions_parsed
quesitons_parsed
quit
questions_parsed
q
questions_parsed[:strand1][:quit
questions_parsed[:strand1]
questions_parsed[strand1]
questions_parsed
question_parsed
quit
questions_parsed
parsed_questions
quit
questions_parsed
quit
questions_parsed[1]
questions_parsed
continue
question[1][1]
next
quit
questions_parsed[1][1]
questions_parsed[1]
questions_parsed
id
standard
strand
next
quit
question[2].to_i
question
question[2]
strand
next
strand
question.first
strand
question
continue
question
idx
quit
idx
continue
question
quit
idx
question
quit
strand2
strand1
quit
quest.first.to_i == 1
quest.first.to_i
quest.first == 1
quest
continue
question
next
quest
quit
y
quit
y
q
quit
strand2
strand1
continue
q
strand2
strand1
question
next
strand2
strand1
question
next
question
qustion
quit
question
quit
strand2quit
strand2
strand1
quit
continue
quit
!(count % 1).zero?
count < 1
count
